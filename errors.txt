--- New Issues: Tagalog Dictionary Implementation / 2024-12-29 ---
1. [INITIAL] ilipino Dictionary Reference: https://archive.org/details/350306621filipinodictionary/page/n11/mode/2up  
     Issue: Has too many words, would require arduous labor to transfer to the filipino_dixt.text
     Possible Solution:
     - Filter out the reference and only choose commonly used words.
     - Find another source with fewer and more common words.

2. Filipino words with hypens are not read by the program as valid as our program ignores punctations.
   Example: mag-abante, mag-abay, ipang-abot, etc. [SOLVED | 2025-01-05 | 8:39 AM]

3. Words identified as invalid does not fully turn back into black after being edited by the user.
   [PARTIALLY SOLVED | 2:30 AM | 01-07-2025]

--- Filipino Words Implementation Update / 2025-01-02 / As of 3:30 AM
1. The filipino_dict.txt file is currently a work-in-progress (WIP).
     - I chose to discard the initial reference and instead made use of ChatGPT as well as many other websites to generate the Filipino word list
     - The current file is not yet finished as it only currently contains 3413 words.
     - Will add more and update this on the following days.

     NOTE: the next phase of coding (upgrading the User Interface) may now begin as futher updates on my part will not affect the spellchecker.py file.

2. The second and third issues listed on the previous note (New Issues: Tagalog Dictionary Implementation) remains the same [Not Fixed].  

--- RJ's Notes: GUI Implementation / 2025-01-03 / AS OF 1:44 PM ---
1. Created a Test File
   - Created a copy of our working file, `spellchecker.py`, named `sampleUi.py`, for testing the GUI.  

2. Implemented GUI Logic
   - Integrated the GUI logic (using Tkinter) into the `Spellchecker` class within `sampleUi.py`.  
   - Main Window Layout:  
     - The main window uses a vertical layout with a `vertical_paned` PanedWindow, divided into two resizable sections:  
       - Top Section:  
         - Divided into two frames using a `horizontal_paned` PanedWindow nested inside the `vertical_paned` PanedWindow, for  horizontal resizing.  
         - Left Frame (Text Input Area):  
           - Label: Displays "Start by typing or pasting your text..." (Font: Arial, size 10).  
           - ScrolledText Widget: A scrollable text box for input (Font: Arial, size 11).  
         - Right Frame (Suggestion Panel):  
           - Label: Displays "Suggestions" (Font: Arial, size 10).  
           - ScrolledText Widget: A scrollable, read-only text box for displaying spell-check suggestions (Font: Arial, size 11).  
       - Bottom Section (Terminal Emulation):  
         - Acts as a terminal window for logging messages, errors, and updates. (Font: Courier New, size 9).  
         - Background Color: Black.  
         - Text Colors:  
           - White for standard output (stdout).  
           - Red for error messages (stderr).  
         - Redirection: `sys.stdout` and `sys.stderr` are redirected to display output directly in this widget.  

3. Redirected Terminal Outputs to the Widget itself
   - Redirected terminal outputs to the GUI terminal widget for easier state monitoring. This eliminates the need to switch back and forth between the GUI and VS Code for state outputs.  
   - Added a `TextRedirector` class to implement this feature. 

--- Areas for Improvement: Overall Implementation ---
1. The GUI is simple (easy on the eyes) but appears outdated.
2. Red highlights for incorrect words are not applied when typing on a new line.
     - For example, when entering text manually, if you press Enter and type a few incorrect words on the new line, the words are still tagged as invalid but do not display the red highlight.
     [PARTIALLY SOLVED | 2:57 AM | 2025-01-17]
3. Tested using the popular Filipino children’s song, "Ako ay May Lobo". Some common words in the song are not included in the dictionary.
4. It’s unclear if we’re still going to implement the spelling suggestion feature. However, an allocated frame for this is already in place, just in case.